package main;

import java.util.Scanner;

public class Decrypter {

	private static String decryption;

	public static String decrypt(String message, int cipherType) {
		String decodedMessage = null;
		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(System.in);

		if (cipherType == 1) {
			System.out.print("Shift number (no greater than 26)\n  :: ");
			int i = scanner.nextInt();
			decodedMessage = d_shiftCipher(message, i);
		} else if (cipherType == 2) {
			// WAGSTEIN CIPHER
			System.out.print("Enter the value of x (1-10)\n  :: ");
			int i = scanner.nextInt();
			decodedMessage = d_wagstein(message, i);
		}

		return decodedMessage;
	}

	public static String d_shiftCipher(String message, int i) {
		String decryption = "";
		int[] bytes = new int[message.length()];
		for (int j = 0; j < message.length(); j++) {
			if ((int)message.charAt(j) > 96 && (int)message.charAt(j) < 123) {
				bytes[j] = ((((int)message.charAt(j)-71)-i)%26)+65;
			} else if ((int)message.charAt(j) > 64 && (int)message.charAt(j) < 91) {
				bytes[j] = ((((int)message.charAt(j)-39)-i)%26)+65;
			} else {
				bytes[j] = 32; //if unrecognized char - set to 'space'
			}
		}
		for (int k = 0; k < message.length(); k++) {
			decryption += (char)bytes[k];
		}

		return decryption;
	}

	public static String d_wagstein(String message, int x) {
		decryption = "";
		int[] value = new int[message.length()];
		int[] bytes = new int[message.length()];
		int[] coeff = new int[message.length()];
		int powerCounter = 1;
		int n = 0;
		//load in values as 0-9 numbers or as "32" a space
		for (int k = 0; k < message.length(); k++) {
			if ((int)message.charAt(k) > 96 && (int)message.charAt(k) < 107) {
				value[n] = (int)message.charAt(k)-97;
				n++;
			} else if ((int)message.charAt(k) > 64 && (int)message.charAt(k) < 75) {
				value[n] = (int)message.charAt(k)-65;
				n++;
			} else if ((int)message.charAt(k) == 47) {
				value[n] = 32; //space
				n++;
			} else {
				//do nothing
			}
		}
		int sum = 0;
		int i = 0;
		//compress sequential numbers 0-9 to multiple-digit numbers
		for (int j = 0; j < value.length; j++) {
			if (value[j] == 32) {
				bytes[i] = sum;
				i++;
				sum = 0;
				bytes[i] = sum;
				i++;
			} else {
				sum *= 10;
				sum += value[j];
			}
			System.out.print("\n" + value[j] + "\n" + bytes[i] + "\n");
		}
		//turn into words by dividing by x^nth letter in word and then dividing again by the nth-1 letter
		//adding to return String
		for (int m = 0; m < bytes.length; m++) {
			if (bytes[m] == 0) {
				coeff[m] = 32;
				powerCounter = 1;
			} else {
				int pow = powerCounter-1;
				coeff[m] = (int)(bytes[m]/(Math.pow(x, pow)*powerCounter));
				powerCounter++;
				coeff[m] += 64;
			}
			decryption += (char)coeff[m];
		}
		return decryption;
	}

}
